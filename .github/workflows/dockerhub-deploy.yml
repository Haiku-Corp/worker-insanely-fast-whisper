name: CD | DockerHub Deploy

on:
  push:
    branches:
      - "main"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker Image Tag"
        required: false
        default: "dev"

jobs:
  initialize_runner:
    runs-on: ubuntu-latest
    outputs:
      runpod_job_id: ${{ steps.extract_id.outputs.runpod_job_id }}

    steps:
      - name: Deploy Worker
        id: deploy
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://api.runpod.ai/v2/${{ vars.RUNPOD_ENDPOINT }}/run"
          method: "POST"
          customHeaders: '{"Content-Type": "application/json"}'
          bearerToken: ${{ secrets.RUNPOD_API_KEY }}
          data: '{"input":{"github_pat": "${{ secrets.GH_PAT }}", "github_org":"${{ github.repository_owner }}"}}'

      - name: Extract Job ID
        id: extract_id
        run: |
          ID=$(echo '${{ steps.deploy.outputs.response }}' | jq -r '.id')
          echo "runpod_job_id=$ID" >> $GITHUB_ENV

  docker-build:
    needs: initialize_runner
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_REPO }}/${{ vars.DOCKERHUB_IMG }}:${{ (github.event_name == 'release' && github.event.release.tag_name) || (github.event_name == 'workflow_dispatch' && github.event.inputs.image_tag) || 'dev' }}

  docker-test:
    needs: [docker-build, initialize_runner]
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Tests on Docker Image
        if: github.event_name != 'release'
        id: run-tests
        uses: direlines/runpod-test-runner@v1.7
        with:
          image-tag: ${{ vars.DOCKERHUB_REPO }}/${{ vars.DOCKERHUB_IMG }}:${{ (github.event_name == 'release' && github.event.release.tag_name) || (github.event_name == 'workflow_dispatch' && github.event.inputs.image_tag) || 'dev' }}
          runpod-api-key: ${{ secrets.RUNPOD_API_KEY }}
          request-timeout: 600

      - name: Verify Tests
        env:
          TOTAL_TESTS: ${{ steps.run-tests.outputs.total-tests }}
          SUCCESSFUL_TESTS: ${{ steps.run-tests.outputs.succeeded }}
          RESULTS: ${{ steps.run-tests.outputs.results }}
        run: |
          echo "Total tests: $TOTAL_TESTS"
          echo "Successful tests: $SUCCESSFUL_TESTS"
          echo "Full results: $RESULTS"
          if [ "$TOTAL_TESTS" != "$SUCCESSFUL_TESTS" ]; then
              exit 1
          fi

  terminate_runner:
    if: always()
    needs: [docker-build, docker-test, initialize_runner]
    runs-on: ubuntu-latest

    steps:
      - name: Get Job Status
        id: get_status
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://api.runpod.ai/v2/${{ vars.RUNPOD_ENDPOINT }}/status/${{ env.runpod_job_id }}"
          method: "GET"
          customHeaders: '{"Content-Type": "application/json"}'
          bearerToken: ${{ secrets.RUNPOD_API_KEY }}

      - name: Parse Status
        id: parse_status
        run: |
          STATUS=$(echo '${{ steps.get_status.outputs.response }}' | jq -r '.status')
          echo "status=$STATUS" >> $GITHUB_ENV

      - name: Shutdown Worker
        if: ${{ env.status != 'COMPLETED' }}
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://api.runpod.ai/v2/${{ vars.RUNPOD_ENDPOINT }}/cancel/${{ env.runpod_job_id }}"
          method: "POST"
          customHeaders: '{"Content-Type": "application/json"}'
          bearerToken: ${{ secrets.RUNPOD_API_KEY }}
